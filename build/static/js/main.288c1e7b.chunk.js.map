{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","alt","FormControl","placeholder","value","onChange","event","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"iPAoBeA,G,MAhBCC,sBAAW,WAAwBC,GAAS,IAA9BC,EAA6B,EAA7BA,QACtBC,EADmD,EAApBC,WACTF,EAAQE,SACpC,OACE,yBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,iBAC7C,kBAACG,EAAA,EAAD,CAAMD,UAAWF,EAAS,mBAAqB,qBAC7C,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,QAAQC,QAAQ,KAAKC,UAAU,OAC7CR,GAAD,UAAcD,EAAQE,UAAY,eAAlC,MAAsD,IACtDF,EAAQA,gB,iBCKJU,G,OAbGC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,iDACZC,YAAa,wDACbC,UAAW,iCACXC,cAAe,6CACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGMC,a,yBC4EVC,MA5Ef,WAAe,MAIYC,mBAAS,IAJrB,mBAINC,EAJM,KAIAC,EAJA,OAKkBF,mBAAS,IAL3B,mBAKNG,EALM,KAKGC,EALH,OAMkBJ,mBAAS,IAN3B,mBAMNrB,EANM,KAMG0B,EANH,KAsCb,OA9BAC,qBAAU,WACRnB,EAAGoB,WAAW,YACbC,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACXN,EACEM,EAASC,KAAKC,KAAI,SAACC,GAAD,MAAU,CAACC,GAAGD,EAAIC,GAAIrC,QAAQoC,EAAIE,iBAGvD,IAGHT,qBAAU,WACRD,EAAYW,OAAO,6BAGlB,IAgBD,yBAAKpC,UAAU,OACb,yBAAKqC,IAAI,2FAA2FC,IAAI,OACxG,kDACA,uCAAavC,GAGb,0BAAMC,UAAU,YAChB,kBAACuC,EAAA,EAAD,CAAavC,UAAU,oBACvB,2BACAA,UAAU,aACVwC,YAAY,qBACZC,MAAOpB,EACPqB,SAAU,SAACC,GAAD,OAAWrB,EAASqB,EAAMC,OAAOH,UAE3C,kBAACI,EAAA,EAAD,CACM7C,UAAU,kBACV8C,UAAWzB,EACXhB,QAAQ,YACRD,MAAM,UACN2C,KAAK,SACLC,QAlCU,SAACL,GAIjBA,EAAMM,iBACN1C,EAAGoB,WAAW,YAAYuB,IAAI,CAC5BrD,QAASwB,EACTtB,SAAUA,EACVoD,UAAW3C,IAASU,UAAUkC,WAAWC,oBAE3C/B,EAAS,MA0BH,kBAAC,IAAD,SAIN,kBAAC,IAAD,KAEEC,EAASS,KAAI,gBAAEE,EAAF,EAAEA,GAAIrC,EAAN,EAAMA,QAAN,OACX,kBAAC,EAAD,CAASyD,IAAKpB,EAAInC,SAAUA,EAAUF,QAASA,UCvErC0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3E,a","file":"static/js/main.288c1e7b.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\r\nimport { Typography, Card, CardContent } from \"@material-ui/core\";\r\nimport \"./Message.css\";\r\n\r\nconst Message = forwardRef(({ message, username }, ref) => {\r\n  const isUser = username === message.username;\r\n  return (\r\n    <div ref={ref} className={`message ${isUser && \"message_user\"}`}>\r\n      <Card className={isUser ? \"message_userCard\" : \"message_guestCard\"}>\r\n        <CardContent>\r\n          <Typography color=\"white\" variant=\"h5\" component=\"h2\">\r\n            {!isUser && `${message.username || \"Unknown User\"}: `}{\" \"}\r\n            {message.message}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Message;","// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nimport firebase from \"firebase\";\r\nimport \"firebase/firestore\"\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyBwZqsl4zCTNWas8XWRfoR6ijZQjilNG-A\",\r\n    authDomain: \"facebook-messenger-clone-dc989.firebaseapp.com\",\r\n    databaseURL: \"https://facebook-messenger-clone-dc989.firebaseio.com\",\r\n    projectId: \"facebook-messenger-clone-dc989\",\r\n    storageBucket: \"facebook-messenger-clone-dc989.appspot.com\",\r\n    messagingSenderId: \"535549743041\",\r\n    appId: \"1:535549743041:web:88ce407431bfc225956940\",\r\n    measurementId: \"G-8PZTLKKPK3\"\r\n  });\r\n\r\n  const db = firebaseApp.firestore();\r\n\r\n  export default db;","import React, { useState, useEffect } from \"react\";\nimport {\n  //Button,\n  FormControl,\n  //InputLabel,\n  //Input,\n  IconButton,\n} from \"@material-ui/core\";\nimport \"./App.css\";\nimport Message from \"./Message\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\nimport FlipMove from \"react-flip-move\";\nimport SendIcon from \"@material-ui/icons/Send\";\n\nfunction App() {\n  // state allows us to change variables on front end without refreshing which is not seen in normal variables.\n  //concept of ReactJS hooks \n  //useState = variable in React which allocates small memory which goes away on rrefreshing\n  const [input,setInput] = useState('');\n  const [messages,setMessages] = useState([]);\n  const [username,setUsername] = useState('');\n  \n  useEffect(() => {\n    db.collection(\"messages\")\n    .orderBy(\"timestamp\", \"desc\")\n    .onSnapshot((snapshot) => {\n      setMessages(\n        snapshot.docs.map((doc) => ({id:doc.id, message:doc.data()}))\n        );\n    });\n  }, [] )\n\n  // useEffect = run code based on a condition\n  useEffect(() => {\n    setUsername(prompt(\"Please Enter Your Name\"));\n    //if its blank inside [], then This code runs once when the app component loads \n\n  }, []) //Condition inside []\n\n  const sendMessage = (event) => {\n      // By default in form tag when we press enter the page gets refreshed\n      // and thats y our message will not be able to seen.\n      // so In order to prevent page from refreshing we are using prevent default on this event\n      event.preventDefault();\n      db.collection(\"messages\").add({\n        message: input,\n        username: username,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      });\n      setInput(\"\");\n    };\n\n  return (\n    <div className=\"App\">\n      <img src=\"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=80&h=80\" alt=\"FB\"></img>\n      <h1>Facebook Messenger</h1>\n      <h2>Welcome {username}</h2>\n\n      {/* If we will not use form it prevents us from makin entry by Pressing Enter key thats y we included input and button field inside form tag  */}\n      <form className=\"app_form\">\n      <FormControl className=\"app__formControl\">\n      <input \n      className=\"app__input\"\n      placeholder=\"Enter a message...\"\n      value={input}\n      onChange={(event) => setInput(event.target.value)}\n        />\n      <IconButton\n            className=\"app__iconButton\"\n            disabled={!input}\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            onClick={sendMessage}\n          >\n            <SendIcon />\n          </IconButton>\n      </FormControl>\n      </form>\n      <FlipMove>\n      {\n        messages.map(({id, message}) => (\n          <Message key={id} username={username} message={message} />\n        ))\n      }\n      </FlipMove>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}